So
Lx.((Lx.x)x) 
(Lx.(Ly.x y)) w

(Lx.Ly.x + y) 4
(Ly.4 + y) 3
4 + 3

(Lx.Ly.x y)

(Lx.((x y) z))

[L, x, [L, y, [S, x, y]]]

(Lx.x) (Lx.x)
x
[{:t, x}]  []
Lx.x
{:L, x, {:t, x}}

x x
{:S {:t, x} {:t, x}}

(x)
{:t, x}

(Lx.x) y
{:S {:L x {:t, x}} {:t, y}}

x, stack -> [ [x] | stack ]
L.x, stack -> [ [L x] | stack ]
' ', stack -> [ [S t(hd(stack))] | tl(stack) ]
(, stack -> [ [(] | stack ]
), [ x, '(' | stack] -> [ t(x) | stack ]
), [ x, y | stack] -> repeat with [ [t(x) | y] | stack ]
eol, [x | y | stack] -> repeat with [ [t(x) | y] | stack ]
eol, [x] -> ANSWER IS t(x)



becomes
Lx.(x)
becomes
Lx.x

and 
(Lx.(Lx.x))x 
becomes
(   (Lx.x))
becomes
(Lx.x)
becomes
Lx.x

variables don't escape their lambda scope: ie these are equivalent:
Lx.Lx.x
and
Ly.Lx.x
and
L L 1 (De bruijn index)

Forms:
v := ["a"-"z"]
T := v | F | A | P
F := Lv.T
A := T T
P := (T)

Association is left-assoc.  Dots are right-assoc.
So if there are multiple dots, we can paren them:
Lx.Ly.z -> Lx.(Ly.z)

Normalizing steps:
T                     P if T is not a P
T T T                 (T T) T
Lv.T                  Lv.(v)
Lx.Ly.y               Lx.Ly.(y)
x x                   (x x)
Lx.--- -> Lx.(---) all the way to too-many )'s or the end of the line.


Lx.Ly.x y Lz.z

Lx.y Lz.z

(Lx.y) z
